package io.sarl.simulation.multirotor.kdronesim.skills

import fr.utbm.sim.comm.client.SimulationControlClient
import fr.utbm.sim.perceptions.KinematicsState
import fr.utbm.sim.perceptions.Pose
import io.sarl.core.Schedules
import io.sarl.simulation.multirotor.capacities.MultirotorSimulationPerceptionCapacity
import io.sarl.simulation.multirotor.kdronesim.data.KDroneSimKinematicsState
import io.sarl.simulation.multirotor.kdronesim.data.KDroneSimPose
import io.sarl.simulation.multirotor.perceptions.IKinematicsState
import io.sarl.simulation.multirotor.perceptions.IMultirotorState
import io.sarl.simulation.multirotor.perceptions.IPose
import java.nio.ByteOrder
import java.util.Map
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

skill KDroneSimMultirotorSimulationPerceptionBatched implements MultirotorSimulationPerceptionCapacity {
	
	uses Schedules
	
	val executorService = Executors.newSingleThreadScheduledExecutor()

	val client : SimulationControlClient
	
	var positions: Map<Integer, Pose> = newHashMap
	var kinematicsStates: Map<Integer, KinematicsState> = newHashMap

	new() {
		this("127.0.0.1", 9877)
	}

	new(ipAddress : String, port : Integer) {
		client = new SimulationControlClient(ipAddress, port, ByteOrder.LITTLE_ENDIAN)
		
//		every(50) [
//			synchronized (positions) {
//				positions = client.allPositions.get
//			}
//			synchronized (kinematicsStates) {
//				kinematicsStates = client.allKinematics.get
//			}
//		]
		executorService.scheduleWithFixedDelay([
			 synchronized (positions) {
				positions = client.allPositions.get
			}
			synchronized (kinematicsStates) {
				kinematicsStates = client.allKinematics.get
			}
		], 0, 50, TimeUnit.MILLISECONDS)
	}
	
	override getMultirotorState(vehicleName : String) : IMultirotorState {
		synchronized (this.client) {
			// TODO
//			return new AirSimMultirotorState(this.rpcLibClient.getMultirotorState(vehicleName))
		}
	}

	override getObjectPose(objectName : String) : IPose {
		synchronized(positions) {
			return new KDroneSimPose(positions.get(Integer.parseInt(objectName)))
		}
	}

	override getGroundTruthKinematics(vehicleName : String) : IKinematicsState {
		synchronized (kinematicsStates) {
			return new KDroneSimKinematicsState(kinematicsStates.get(Integer.parseInt(vehicleName)))
		}
	}
}
