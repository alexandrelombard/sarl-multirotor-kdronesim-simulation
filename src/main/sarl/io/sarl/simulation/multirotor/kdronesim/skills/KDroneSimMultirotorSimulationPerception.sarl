package io.sarl.simulation.multirotor.kdronesim.skills

import fr.utbm.sim.comm.client.SimulationControlClient
import io.sarl.simulation.multirotor.capacities.MultirotorSimulationPerceptionCapacity
import io.sarl.simulation.multirotor.perceptions.IKinematicsState
import io.sarl.simulation.multirotor.perceptions.IMultirotorState
import io.sarl.simulation.multirotor.perceptions.IPose
import java.nio.ByteOrder
import io.sarl.simulation.multirotor.kdronesim.data.KDroneSimPose
import io.sarl.simulation.multirotor.kdronesim.data.KDroneSimKinematicsState

skill KDroneSimMultirotorSimulationPerception implements MultirotorSimulationPerceptionCapacity {
	
	val client : SimulationControlClient

	new() {
		this("127.0.0.1", 9877)
	}

	new(ipAddress : String, port : Integer) {
		client = new SimulationControlClient(ipAddress, port, ByteOrder.LITTLE_ENDIAN)
	}
	
	override getMultirotorState(vehicleName : String) : IMultirotorState {
		synchronized (this.client) {
			// TODO
//			return new AirSimMultirotorState(this.rpcLibClient.getMultirotorState(vehicleName))
		}
	}

	override getObjectPose(objectName : String) : IPose {
		synchronized (this.client) {
			val futurePose = client.getPosition(Integer.parseInt(objectName))
			return new KDroneSimPose(futurePose.get)
		}
	}

	override getGroundTruthKinematics(vehicleName : String) : IKinematicsState {
		synchronized (this.client) {
			val futureKinematics = client.getKinematicsState(Integer.parseInt(vehicleName))
			return new KDroneSimKinematicsState(futureKinematics.get)
		}
	}
}
